generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Companies {
  id                     Int                      @id @default(autoincrement())
  companyName            String                   @db.VarChar(255)
  companyLogo            String?                  @db.VarChar(255)
  companyUrl             String                   @db.VarChar(255)
  companyLinkedin        String?                  @db.VarChar(255)
  companyFacebook        String?                  @db.VarChar(255)
  companyCareersUrl      String?                  @db.VarChar(255)
  officeLocation         String?                  @db.VarChar(255)
  established            String?                  @db.VarChar(255)
  totalEmployees         String?                  @db.VarChar(255)
  primaryTechStack       primaryTechStack[]
  companyDescription     String?                  @db.VarChar(500)
  companyEmail           String?                  @db.VarChar(255)
  salaryRange            String?                  @db.VarChar(255)
  status                 Int?                     @default(1) // 1 for active, 0 for inactive
  createdAt              DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt              DateTime                 @default(now()) @updatedAt @db.Timestamp(0)
  workType               workType[]
  hireInternsandFreshers hireInternsandFreshers[]
  currentHiringRole      currentHiringRole[]
}

model workType {
  id          Int        @id @default(autoincrement())
  workType    String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  Companies   Companies? @relation(fields: [companiesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companiesId Int?
}

model hireInternsandFreshers {
  id          Int        @id @default(autoincrement())
  hireType    String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  Companies   Companies? @relation(fields: [companiesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companiesId Int?
}

model primaryTechStack {
  id          Int        @id @default(autoincrement())
  techStack   String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  Companies   Companies? @relation(fields: [companiesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companiesId Int?
}

model currentHiringRole {
  id          Int        @id @default(autoincrement())
  hiringRole  String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  Companies   Companies? @relation(fields: [companiesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companiesId Int?
}

model Events {
  id                    Int       @id @default(autoincrement())
  event_name            String    @db.VarChar(255)
  event_arranged_by     String?   @db.VarChar(255)
  event_location        String?   @db.VarChar(255)
  event_organizer_email String?   @unique @db.VarChar(255)
  event_organizer_phone String?   @unique @db.VarChar(11)
  event_image           String?   @db.VarChar(255)
  event_type            String?   @db.VarChar(255)
  event_desc            String?   @db.VarChar(500)
  entry_fee             Int?      @db.Int
  event_date            DateTime? @db.Timestamp(0)
  event_time            DateTime? @db.Timestamp(0)
  event_link            String?   @db.VarChar(255)
  createdAt             DateTime  @default(now()) @db.Timestamp(0)
  updatedAt             DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  Users                 Users[]
}

model Users {
  id            Int      @id @default(autoincrement())
  user_name     String?  @unique @db.VarChar(255)
  user_email    String   @unique @db.VarChar(255)
  user_password String   @db.VarChar(255)
  user_phone    String?  @unique @db.VarChar(11)
  user_image    String?  @db.VarChar(255)
  user_role     String?  @default("User") @db.VarChar(255)
  user_bio      String?  @db.VarChar(500)
  user_location String?  @db.VarChar(255)
  user_skills   String?  @db.VarChar(500)
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamp(0)
  Events        Events?  @relation(fields: [eventsId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  eventsId      Int?
}

enum User_Role {
  Admin
  User
}
